package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Buildstatus buildstatus

swagger:model buildstatus
*/
type Buildstatus struct {

	/* buildlog
	 */
	Buildlog []*Link `json:"buildlog,omitempty"`

	/* estimated seconds from now that the build will be completed.  Used to direct when you should check back
	 */
	Eta int32 `json:"eta,omitempty"`

	/* images
	 */
	Images []*Link `json:"images,omitempty"`

	/* status
	 */
	Status string `json:"status,omitempty"`

	/* testlog
	 */
	Testlog []*Link `json:"testlog,omitempty"`
}

// Validate validates this buildstatus
func (m *Buildstatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildlog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTestlog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Buildstatus) validateBuildlog(formats strfmt.Registry) error {

	if swag.IsZero(m.Buildlog) { // not required
		return nil
	}

	return nil
}

func (m *Buildstatus) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	return nil
}

func (m *Buildstatus) validateTestlog(formats strfmt.Registry) error {

	if swag.IsZero(m.Testlog) { // not required
		return nil
	}

	return nil
}
