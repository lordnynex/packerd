package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Buildresponse buildresponse

swagger:model buildresponse
*/
type Buildresponse struct {

	/* url to remote artifact
	 */
	Artifacts []*Link `json:"artifacts,omitempty"`

	/* link to the build request
	 */
	Buildrequest []*Link `json:"buildrequest,omitempty"`

	/* uuid of the build request triggering this response
	 */
	Buildrequestid string `json:"buildrequestid,omitempty"`

	/* buildstages
	 */
	Buildstages []*Buildstage `json:"buildstages,omitempty"`

	/* estimated seconds from now that the build will be completed.  Used to direct when you should check back
	 */
	Eta int32 `json:"eta,omitempty"`

	/* uuid of this response
	 */
	ID string `json:"id,omitempty"`

	/* local image ids
	 */
	Images []string `json:"images,omitempty"`

	/* status of the build
	 */
	Status string `json:"status,omitempty"`
}

// Validate validates this buildresponse
func (m *Buildresponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBuildrequest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBuildstages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Buildresponse) validateArtifacts(formats strfmt.Registry) error {

	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Artifacts); i++ {

		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {

			if err := m.Artifacts[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Buildresponse) validateBuildrequest(formats strfmt.Registry) error {

	if swag.IsZero(m.Buildrequest) { // not required
		return nil
	}

	return nil
}

func (m *Buildresponse) validateBuildstages(formats strfmt.Registry) error {

	if swag.IsZero(m.Buildstages) { // not required
		return nil
	}

	for i := 0; i < len(m.Buildstages); i++ {

		if swag.IsZero(m.Buildstages[i]) { // not required
			continue
		}

		if m.Buildstages[i] != nil {

			if err := m.Buildstages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Buildresponse) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	return nil
}
