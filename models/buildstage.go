package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Buildstage buildstage

swagger:model buildstage
*/
type Buildstage struct {

	/* end
	 */
	End strfmt.DateTime `json:"end,omitempty"`

	/* log
	 */
	Log string `json:"log,omitempty"`

	/* name
	 */
	Name string `json:"name,omitempty"`

	/* start
	 */
	Start strfmt.DateTime `json:"start,omitempty"`

	/* status
	 */
	Status string `json:"status,omitempty"`
}

// Validate validates this buildstage
func (m *Buildstage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var buildstageTypeStatusPropEnum []interface{}

// prop value enum
func (m *Buildstage) validateStatusEnum(path, location string, value string) error {
	if buildstageTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["pending","running","failed","complete"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			buildstageTypeStatusPropEnum = append(buildstageTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, buildstageTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Buildstage) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}
