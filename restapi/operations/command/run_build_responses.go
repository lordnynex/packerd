package command

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.kdc.capitalone.com/kbs316/packerd/models"
)

/*RunBuildAccepted Accepted the request. Returns a link to the queued build

swagger:response runBuildAccepted
*/
type RunBuildAccepted struct {

	// In: body
	Payload *models.Link `json:"body,omitempty"`
}

// NewRunBuildAccepted creates RunBuildAccepted with default headers values
func NewRunBuildAccepted() *RunBuildAccepted {
	return &RunBuildAccepted{}
}

// WithPayload adds the payload to the run build accepted response
func (o *RunBuildAccepted) WithPayload(payload *models.Link) *RunBuildAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the run build accepted response
func (o *RunBuildAccepted) SetPayload(payload *models.Link) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RunBuildAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*RunBuildBadRequest generic error response

swagger:response runBuildBadRequest
*/
type RunBuildBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewRunBuildBadRequest creates RunBuildBadRequest with default headers values
func NewRunBuildBadRequest() *RunBuildBadRequest {
	return &RunBuildBadRequest{}
}

// WithPayload adds the payload to the run build bad request response
func (o *RunBuildBadRequest) WithPayload(payload *models.Error) *RunBuildBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the run build bad request response
func (o *RunBuildBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RunBuildBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
