package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/tompscanlan/packerd/models"
)

/*GetPackerLogByIDOK returns a packer build log

swagger:response getPackerLogByIdOK
*/
type GetPackerLogByIDOK struct {

	// In: body
	Payload *models.Buildstatus `json:"body,omitempty"`
}

// NewGetPackerLogByIDOK creates GetPackerLogByIDOK with default headers values
func NewGetPackerLogByIDOK() *GetPackerLogByIDOK {
	return &GetPackerLogByIDOK{}
}

// WithPayload adds the payload to the get packer log by Id o k response
func (o *GetPackerLogByIDOK) WithPayload(payload *models.Buildstatus) *GetPackerLogByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get packer log by Id o k response
func (o *GetPackerLogByIDOK) SetPayload(payload *models.Buildstatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPackerLogByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetPackerLogByIDBadRequest generic error response

swagger:response getPackerLogByIdBadRequest
*/
type GetPackerLogByIDBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPackerLogByIDBadRequest creates GetPackerLogByIDBadRequest with default headers values
func NewGetPackerLogByIDBadRequest() *GetPackerLogByIDBadRequest {
	return &GetPackerLogByIDBadRequest{}
}

// WithPayload adds the payload to the get packer log by Id bad request response
func (o *GetPackerLogByIDBadRequest) WithPayload(payload *models.Error) *GetPackerLogByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get packer log by Id bad request response
func (o *GetPackerLogByIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPackerLogByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
