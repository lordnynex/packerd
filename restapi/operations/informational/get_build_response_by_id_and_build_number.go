package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBuildResponseByIDAndBuildNumberHandlerFunc turns a function with the right signature into a get build response by ID and build number handler
type GetBuildResponseByIDAndBuildNumberHandlerFunc func(GetBuildResponseByIDAndBuildNumberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBuildResponseByIDAndBuildNumberHandlerFunc) Handle(params GetBuildResponseByIDAndBuildNumberParams) middleware.Responder {
	return fn(params)
}

// GetBuildResponseByIDAndBuildNumberHandler interface for that can handle valid get build response by ID and build number params
type GetBuildResponseByIDAndBuildNumberHandler interface {
	Handle(GetBuildResponseByIDAndBuildNumberParams) middleware.Responder
}

// NewGetBuildResponseByIDAndBuildNumber creates a new http.Handler for the get build response by ID and build number operation
func NewGetBuildResponseByIDAndBuildNumber(ctx *middleware.Context, handler GetBuildResponseByIDAndBuildNumberHandler) *GetBuildResponseByIDAndBuildNumber {
	return &GetBuildResponseByIDAndBuildNumber{Context: ctx, Handler: handler}
}

/*GetBuildResponseByIDAndBuildNumber swagger:route GET /build/responses/{id}/{buildnumber} informational getBuildResponseByIdAndBuildNumber

Get full detail of the response for a given build

*/
type GetBuildResponseByIDAndBuildNumber struct {
	Context *middleware.Context
	Handler GetBuildResponseByIDAndBuildNumberHandler
}

func (o *GetBuildResponseByIDAndBuildNumber) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetBuildResponseByIDAndBuildNumberParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
