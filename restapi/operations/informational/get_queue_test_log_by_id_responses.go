package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.kdc.capitalone.com/kbs316/packerd/models"
)

/*GetQueueTestLogByIDOK returns the test kitchen run log

swagger:response getQueueTestLogByIdOK
*/
type GetQueueTestLogByIDOK struct {

	// In: body
	Payload string `json:"body,omitempty"`
}

// NewGetQueueTestLogByIDOK creates GetQueueTestLogByIDOK with default headers values
func NewGetQueueTestLogByIDOK() *GetQueueTestLogByIDOK {
	return &GetQueueTestLogByIDOK{}
}

// WithPayload adds the payload to the get queue test log by Id o k response
func (o *GetQueueTestLogByIDOK) WithPayload(payload string) *GetQueueTestLogByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue test log by Id o k response
func (o *GetQueueTestLogByIDOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueTestLogByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetQueueTestLogByIDBadRequest generic error response

swagger:response getQueueTestLogByIdBadRequest
*/
type GetQueueTestLogByIDBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQueueTestLogByIDBadRequest creates GetQueueTestLogByIDBadRequest with default headers values
func NewGetQueueTestLogByIDBadRequest() *GetQueueTestLogByIDBadRequest {
	return &GetQueueTestLogByIDBadRequest{}
}

// WithPayload adds the payload to the get queue test log by Id bad request response
func (o *GetQueueTestLogByIDBadRequest) WithPayload(payload *models.Error) *GetQueueTestLogByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue test log by Id bad request response
func (o *GetQueueTestLogByIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueTestLogByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
