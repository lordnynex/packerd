package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.kdc.capitalone.com/kbs316/packerd/models"
)

/*GetQueueByIDOK returns a build status

swagger:response getQueueByIdOK
*/
type GetQueueByIDOK struct {

	// In: body
	Payload *models.Buildrequest `json:"body,omitempty"`
}

// NewGetQueueByIDOK creates GetQueueByIDOK with default headers values
func NewGetQueueByIDOK() *GetQueueByIDOK {
	return &GetQueueByIDOK{}
}

// WithPayload adds the payload to the get queue by Id o k response
func (o *GetQueueByIDOK) WithPayload(payload *models.Buildrequest) *GetQueueByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue by Id o k response
func (o *GetQueueByIDOK) SetPayload(payload *models.Buildrequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetQueueByIDBadRequest generic error response

swagger:response getQueueByIdBadRequest
*/
type GetQueueByIDBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQueueByIDBadRequest creates GetQueueByIDBadRequest with default headers values
func NewGetQueueByIDBadRequest() *GetQueueByIDBadRequest {
	return &GetQueueByIDBadRequest{}
}

// WithPayload adds the payload to the get queue by Id bad request response
func (o *GetQueueByIDBadRequest) WithPayload(payload *models.Error) *GetQueueByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue by Id bad request response
func (o *GetQueueByIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
