package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/tompscanlan/packerd/models"
)

/*GetBuildByIDOK returns a build status

swagger:response getBuildByIdOK
*/
type GetBuildByIDOK struct {

	// In: body
	Payload *models.Buildrequest `json:"body,omitempty"`
}

// NewGetBuildByIDOK creates GetBuildByIDOK with default headers values
func NewGetBuildByIDOK() *GetBuildByIDOK {
	return &GetBuildByIDOK{}
}

// WithPayload adds the payload to the get build by Id o k response
func (o *GetBuildByIDOK) WithPayload(payload *models.Buildrequest) *GetBuildByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get build by Id o k response
func (o *GetBuildByIDOK) SetPayload(payload *models.Buildrequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBuildByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetBuildByIDBadRequest generic error response

swagger:response getBuildByIdBadRequest
*/
type GetBuildByIDBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBuildByIDBadRequest creates GetBuildByIDBadRequest with default headers values
func NewGetBuildByIDBadRequest() *GetBuildByIDBadRequest {
	return &GetBuildByIDBadRequest{}
}

// WithPayload adds the payload to the get build by Id bad request response
func (o *GetBuildByIDBadRequest) WithPayload(payload *models.Error) *GetBuildByIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get build by Id bad request response
func (o *GetBuildByIDBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBuildByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
