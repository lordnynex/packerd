package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPackerLogByIDHandlerFunc turns a function with the right signature into a get packer log by Id handler
type GetPackerLogByIDHandlerFunc func(GetPackerLogByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPackerLogByIDHandlerFunc) Handle(params GetPackerLogByIDParams) middleware.Responder {
	return fn(params)
}

// GetPackerLogByIDHandler interface for that can handle valid get packer log by Id params
type GetPackerLogByIDHandler interface {
	Handle(GetPackerLogByIDParams) middleware.Responder
}

// NewGetPackerLogByID creates a new http.Handler for the get packer log by Id operation
func NewGetPackerLogByID(ctx *middleware.Context, handler GetPackerLogByIDHandler) *GetPackerLogByID {
	return &GetPackerLogByID{Context: ctx, Handler: handler}
}

/*GetPackerLogByID swagger:route GET /queue/{id}/buildlog informational getPackerLogById

get the packer log of a specific queued build request

*/
type GetPackerLogByID struct {
	Context *middleware.Context
	Handler GetPackerLogByIDHandler
}

func (o *GetPackerLogByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetPackerLogByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
