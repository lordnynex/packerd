package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.kdc.capitalone.com/kbs316/packerd/models"
)

/*GetQueueOK list of links to the all queued builds

swagger:response getQueueOK
*/
type GetQueueOK struct {

	// In: body
	Payload []*models.Link `json:"body,omitempty"`
}

// NewGetQueueOK creates GetQueueOK with default headers values
func NewGetQueueOK() *GetQueueOK {
	return &GetQueueOK{}
}

// WithPayload adds the payload to the get queue o k response
func (o *GetQueueOK) WithPayload(payload []*models.Link) *GetQueueOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue o k response
func (o *GetQueueOK) SetPayload(payload []*models.Link) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetQueueBadRequest generic error response

swagger:response getQueueBadRequest
*/
type GetQueueBadRequest struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQueueBadRequest creates GetQueueBadRequest with default headers values
func NewGetQueueBadRequest() *GetQueueBadRequest {
	return &GetQueueBadRequest{}
}

// WithPayload adds the payload to the get queue bad request response
func (o *GetQueueBadRequest) WithPayload(payload *models.Error) *GetQueueBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get queue bad request response
func (o *GetQueueBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQueueBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
