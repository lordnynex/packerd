package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/tompscanlan/packerd/restapi/operations/command"
	"github.com/tompscanlan/packerd/restapi/operations/informational"
)

// NewPackerdAPI creates a new Packerd instance
func NewPackerdAPI(spec *loads.Document) *PackerdAPI {
	o := &PackerdAPI{
		spec:            spec,
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
	}

	return o
}

/*PackerdAPI REST interface to packer */
type PackerdAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// InformationalGetBuildListHandler sets the operation handler for the get build list operation
	InformationalGetBuildListHandler informational.GetBuildListHandler
	// InformationalGetBuildListByIDHandler sets the operation handler for the get build list by Id operation
	InformationalGetBuildListByIDHandler informational.GetBuildListByIDHandler
	// InformationalGetBuildResponseByIDAndBuildNumberHandler sets the operation handler for the get build response by ID and build number operation
	InformationalGetBuildResponseByIDAndBuildNumberHandler informational.GetBuildResponseByIDAndBuildNumberHandler
	// InformationalGetBuildResponseByIDHandler sets the operation handler for the get build response by Id operation
	InformationalGetBuildResponseByIDHandler informational.GetBuildResponseByIDHandler
	// InformationalGetBuildStageByNameHandler sets the operation handler for the get build stage by name operation
	InformationalGetBuildStageByNameHandler informational.GetBuildStageByNameHandler
	// InformationalGetBuildStagesByIDBuildNumberHandler sets the operation handler for the get build stages by Id build number operation
	InformationalGetBuildStagesByIDBuildNumberHandler informational.GetBuildStagesByIDBuildNumberHandler
	// InformationalGetHealthHandler sets the operation handler for the get health operation
	InformationalGetHealthHandler informational.GetHealthHandler
	// CommandRunBuildHandler sets the operation handler for the run build operation
	CommandRunBuildHandler command.RunBuildHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *PackerdAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PackerdAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (o *PackerdAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PackerdAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PackerdAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PackerdAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PackerdAPI
func (o *PackerdAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.InformationalGetBuildListHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildListHandler")
	}

	if o.InformationalGetBuildListByIDHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildListByIDHandler")
	}

	if o.InformationalGetBuildResponseByIDAndBuildNumberHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildResponseByIDAndBuildNumberHandler")
	}

	if o.InformationalGetBuildResponseByIDHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildResponseByIDHandler")
	}

	if o.InformationalGetBuildStageByNameHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildStageByNameHandler")
	}

	if o.InformationalGetBuildStagesByIDBuildNumberHandler == nil {
		unregistered = append(unregistered, "informational.GetBuildStagesByIDBuildNumberHandler")
	}

	if o.InformationalGetHealthHandler == nil {
		unregistered = append(unregistered, "informational.GetHealthHandler")
	}

	if o.CommandRunBuildHandler == nil {
		unregistered = append(unregistered, "command.RunBuildHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PackerdAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PackerdAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *PackerdAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *PackerdAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PackerdAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

func (o *PackerdAPI) initHandlerCache() {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/queue"] = informational.NewGetBuildList(o.context, o.InformationalGetBuildListHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/queue/{id}"] = informational.NewGetBuildListByID(o.context, o.InformationalGetBuildListByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/responses/{id}/{buildnumber}"] = informational.NewGetBuildResponseByIDAndBuildNumber(o.context, o.InformationalGetBuildResponseByIDAndBuildNumberHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/responses/{id}"] = informational.NewGetBuildResponseByID(o.context, o.InformationalGetBuildResponseByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/responses/{id}/{buildnumber}/stages/{stagename}"] = informational.NewGetBuildStageByName(o.context, o.InformationalGetBuildStageByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/build/responses/{id}/{buildnumber}/stages"] = informational.NewGetBuildStagesByIDBuildNumber(o.context, o.InformationalGetBuildStagesByIDBuildNumberHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/health"] = informational.NewGetHealth(o.context, o.InformationalGetHealthHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/build"] = command.NewRunBuild(o.context, o.CommandRunBuildHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PackerdAPI) Serve(builder middleware.Builder) http.Handler {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}

	return o.context.APIHandler(builder)
}
